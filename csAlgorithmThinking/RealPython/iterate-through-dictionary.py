# https://realpython.com/iterate-through-dictionary-python/#using-some-of-pythons-built-in-functions

'''
Using collections.ChainMap
collections is a useful module from the Python Standard Library that provides specialized container data types. One of these data types is ChainMap, which is a dictionary-like class for creating a single view of multiple mappings (like dictionaries). With ChainMap, you can group multiple dictionaries together to create a single, updateable view.

Now, suppose you have two (or more) dictionaries, and you need to iterate through them together as one. To achieve this, you can create a ChainMap object and initialize it with your dictionaries:
使用 collections.ChainMap
collections 是 Python 标准库中一个有用的模块，它提供了专门的容器数据类型。这些数据类型之一是ChainMap，它是一个类似字典的类，用于创建
多个映射的单一视图(如字典)。通过ChainMap，你可以将多个字典组合在一起，创建一个单一的、可更新的视图。

现在，假设你有两个（或更多）字典，而且你需要把它们作为一个整体一起迭代。为了实现
这一点，你可以创建一个ChainMap对象，并用你的字典初始化它。
'''
from collections import ChainMap
fruit_prices = {'apple': 0.40, 'orange': 0.35}
vegetable_prices = {'pepper': 0.20, 'onion': 0.55}
chained_dict = ChainMap(fruit_prices, vegetable_prices)
chained_dict  # A ChainMap object
ChainMap({'apple': 0.4, 'orange': 0.35}, {'pepper': 0.2, 'onion': 0.55})
for key in chained_dict:
    print(key, '->', chained_dict[key])

'''
从集合中导入 ChainMap 后，你需要用你想连锁的字典创建一个 ChainMap 对象，
然后你可以像对待普通字典那样自由地迭代生成的对象。

ChainMap 对象也像标准字典一样实现了 .key()、values()和 .items()，
 ChainMap 生成的类字典对象，就像你对普通字典一样。
 
After importing ChainMap from collections, you need to create 
a ChainMap object with the dictionaries you want to chain, and 
then you can freely iterate through the resulting object as you 
would do with a regular dictionary.

ChainMap objects also implement .keys(), values(), and .items() 
as a standard dictionary does, so you can use these methods to 
iterate through the dictionary-like object generated by ChainMap, 
just like you would do with a regular dictionary:
'''

'''
Chained Iteration With chain()
itertools also provides chain(*iterables), which gets some
iterables as arguments and makes an iterator that yields
elements from the first iterable until it’s exhausted, then
iterates over the next iterable and so on, until all of them
are exhausted.

This allows you to iterate through multiple dictionaries in a
chain, like to what you did with collections.ChainMap:
'''
from itertools import chain
fruit_prices = {'apple': 0.40, 'orange': 0.35, 'banana': 0.25}
vegetable_prices = {'pepper': 0.20, 'onion': 0.55, 'tomato': 0.42}
for item in chain(fruit_prices.items(), vegetable_prices.items()):
    print(item)

('apple', 0.4)
('orange', 0.35)
('banana', 0.25)
('pepper', 0.2)
('onion', 0.55)
('tomato', 0.42)



'''
使用 itertools
Python 的 itertools 是一个模块，它提供了一些有用的工具来执行迭代任务。
让我们看看如何使用其中的一些工具在 Python 中对字典进行迭代。

用 cycle() 进行循环迭代
假设你想在 Python 中迭代一个字典，但你需要在一个循环中反复迭代它。为了完成这
个任务，你可以使用 itertools.cycle(iterable)，它制作一个迭代器，

从 iterable 中返回元素，并保存每个元素的副本。当iterable用完后，cycle()从
保存的副本中返回元素。这是以循环的方式进行的，所以由你来停止这个循环。

在下面的例子中，你将连续三次迭代一个 dictionary 的项目。
Using itertools
Python’s itertools is a module that provides some useful tools to perform iteration tasks. Let’s see how you can use some of them to iterate through a dictionary in Python.

Cyclic Iteration With cycle()
Suppose you want to iterate through a dictionary in Python, but you need to iterate through it repeatedly in a single loop. To get this task done, you can use itertools.cycle(iterable), which makes an iterator returning elements from iterable and saving a copy of each. When iterable is exhausted, cycle() returns elements from the saved copy. This is performed in cyclic fashion, so it’s up to you to stop the cycle.

In the following example, you’ll be iterating through the items of a dictionary three consecutive times:
'''
from itertools import cycle
prices = {'apple': 0.40, 'orange': 0.35, 'banana': 0.25}
times = 3
# Define how many times you need to iterate through prices
total_items = times * len(prices)
for item in cycle(prices.items()):
    if not total_items:
        break
    total_items -= 1
    print(item)
...
('apple', 0.4)
('orange', 0.35)
('banana', 0.25)
('apple', 0.4)
('orange', 0.35)
('banana', 0.25)
('apple', 0.4)
('orange', 0.35)
('banana', 0.25)


fruit_prices = {'apple': 0.40, 'orange': 0.35}
vegetable_prices = {'pepper': 0.20, 'onion': 0.55}
# How to use the unpacking operator **

{**vegetable_prices, **fruit_prices}
{'pepper': 0.2, 'onion': 0.55, 'apple': 0.4, 'orange': 0.35}
# You can use this feature to iterate through multiple dictionaries

for k, v in {**vegetable_prices, **fruit_prices}.items():
    print(k, '->', v)
'''
pepper -> 0.2
onion -> 0.55
apple -> 0.4
orange -> 0.35
'''