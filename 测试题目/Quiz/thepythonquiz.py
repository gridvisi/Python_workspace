

#1 What is the correct command to shuffle the list below?
fruit=['apple', 'banana', 'papaya', 'cherry']
'''
random.shuffle(fruit)
fruit.shuffle()
random.shufflelist(fruit)
shuffle(fruit)


Comment on Twitter:
What is the correct command to shuffle the list below?
fruit=['apple', 'banana', 'papaya', 'cherry']

random.shuffle(fruit)

fruit.shuffle()

random.shuffleList(fruit)

shuffle(fruit)#python #python3 #pythonprogramming #learnpython

‚Äî The Python Quiz (@thepythonquiz) September 20, 2020
'''

#2 How many protocols does Pickle have?
'''
pickle has 5 protocols. The latest protocol version 5 was added in Python 3.8. 
(docs.python.org/3/library/pickle.html#pickle-protocols)


'''

#3
'''
What it the output of the code snippet below?
print(float(False))

What it the output of the code snippet below?
print(float(False))

It will throw a ValueError error.

0.0

0
The float() function casts True to 1.0 and False to 0.0 . 
(docs.python.org/3/library/functions.html#float)
'''

#4
'''
What is the output of the code snippet below?
class Foo(object):
    def __init__(self):
        self.__method()
    def __method(self):
        print('42')

class MoreFoo(Foo):
    def __method(self):
        print('41')

MoreFoo()

rong!üëé

As __method() is a private method (recognisable by the double 
underscores __ ), it cannot be overridden by simply defining 
it as __method(self) in the subclass (to avoid accidental override). 
To force overridding, it has to be redefined as def _Foo__method(self): . 
This is called name mangling. 
(stackoverflow.com/questions/14898197/override-private-met...)


Áî±‰∫é__method()ÊòØ‰∏Ä‰∏™ÁßÅÊúâÊñπÊ≥ïÔºàÂèØ‰ª•ÈÄöËøáÂèå‰∏ãÂàíÁ∫ø__Êù•ËØÜÂà´ÔºâÔºåÂÆÉ‰∏çËÉΩÈÄöËøáÂú®Â≠êÁ±ª‰∏≠ÁÆÄÂçïÂú∞ÂÆö
‰πâ‰∏∫__method(self)ËÄåË¢´ÈáçÂÜôÔºà‰ª•ÈÅøÂÖçÊÑèÂ§ñÁöÑÈáçÂÜôÔºâ„ÄÇ‰∏∫‰∫ÜÂº∫Âà∂Ë¶ÜÁõñÔºåÂÆÉÂøÖÈ°ªË¢´ÈáçÊñ∞ÂÆö‰πâ‰∏∫ 
def _Foo__method(self): „ÄÇËøôÂ∞±ÊòØÊâÄË∞ìÁöÑÂêçÁß∞Ê∑∑Áî®„ÄÇ
(stackoverflow.com/questions/14898197/overrid-private-met...)
'''
class Person(object):
    def __init__(self):
        self.__method()

    def __method(self):
        print('I am student')

class Moreperson(Person):
    def __method(self):
        print('I am teacher')

Moreperson()

'''
#ÂºÄÊîæ-Â∞ÅÈó≠ÂéüÂàôËØ¥ÔºöÊ∞∏Ëøú‰∏çË¶ÅÈáçÂÜô‰ª£Á†Å„ÄÇ

LÔºöÂà©ÊñØÁßëÂ§´Êõø‰ª£ÂéüÂàô„ÄÇ(LSP)

BaseTypeÂøÖÈ°ªÂèØ‰ª•Ë¢´ÂÆÉÁöÑsubTypesÊâÄÊõø‰ª£

Ëøô‰∏™ÂéüÂàôÂÆö‰πâ‰∫ÜÂ≠êÁ±ªÁöÑÂØπË±°ÂøÖÈ°ªÂèØ‰ª•Êõø‰ª£ÂÖ∂Ë∂ÖÁ±ªÁöÑÂØπË±°ËÄå‰∏çÁ†¥ÂùèÂ∫îÁî®„ÄÇ

ËøôË¶ÅÊ±ÇÂ≠êÁ±ªÁöÑÂØπË±°ÂÖ∑Êúâ‰∏éÂÆÉ‰ª¨ÁöÑË∂ÖÁ±ªÁõ∏ÂêåÁöÑË°å‰∏∫ÔºåÂ¶ÇÊûú‰∏Ä‰∏™Ë∂ÖÁ±ªÂèØ‰ª•ÂÅöÊüêÈ°πÂ∑•‰ΩúÔºåÈÇ£‰πàÂ≠êÁ±ªÊúâÂøÖË¶ÅÂèØ‰ª•ÂÅö‰∏éÂÆÉÁöÑË∂ÖÁ±ªÁõ∏ÂêåÁöÑÂ∑•‰Ωú„ÄÇ

Âà©ÊñØÁßëÂ§´Êõø‰ª£ÂéüÂàô‰∏éÁªßÊâøÂØÜÂàáÁõ∏ÂÖ≥„ÄÇÂÆÉÈÄöËøáÂÖ≥Ê≥®Ë∂ÖÁ±ªÂèäÂÖ∂Â≠êÁ±ªÂûãÁöÑË°å‰∏∫ÔºåÊâ©Â±ï‰∫ÜÂºÄÊîæ-Â∞ÅÈó≠ÂéüÂàô„ÄÇ

ÈÄöËøá‰∏Ä‰∏™‰æãÂ≠êÂèØ‰ª•ÂæàÂ•ΩÂú∞ÁêÜËß£Ëøô‰∏™ÂéüÂàô„ÄÇÊÉ≥Ë±°‰∏Ä‰∏ãÔºåÊúâ‰∏Ä‰∏™ÊâßË°å‰ª•‰∏ãÊìç‰ΩúÁöÑÁ±ªAnimalÔºö

ËØ¥ËØù

ÂêÉ‰∏úË•ø

Ëµ∞Ë∑Ø

Êàë‰ª¨Êúâ‰∏Ä‰∏™Â≠êÁ±ªÔºåÁå´ÔºåÂÆÉÊòØ‰∏ÄÁßçÂä®Áâ©ÔºåÁªßÊâø‰∫ÜË∂ÖÁ±ªÂä®Áâ©ÔºåÂπ∂‰∏îÊúâÂÆÉÁöÑË°å‰∏∫ÔºåËØ¥ËØù„ÄÅÂêÉ‰∏úË•øÂíåËµ∞Ë∑Ø„ÄÇ
Âõ†Ê≠§ÔºåËøôÈÄÇÁî®‰∫éÂà©ÊñØÁßëÂ§´Êõø‰ª£ÂéüÂàô„ÄÇ

'''
class Animal:  #(object)
    def __init__(self,talk,eat,walk):
        self.talk = talk
        self.eat = eat
        self.walk = walk

cat = Animal('ÂñµÂñµ','È±º','Áå´Ê≠•')
print(cat.talk)
print(cat.eat)
print(cat.walk)

snail = Animal('‰∏çËÉΩËØ¥ËØù','Âè∂Â≠ê','Áà¨Ë°å')
print(snail.talk)
'''

‰ΩÜÊòØÊàë‰ª¨ÂÅáËÆæÊúâ‰∏Ä‰∏™Â≠êÁ±ªÔºåËúóÁâõÔºåÂÆÉ‰ªçÁÑ∂ÊòØ‰∏Ä‰∏™Âä®Áâ©Ôºå‰ΩÜÊòØ‰∏çËÉΩËØ¥ËØùÔºå
ÊâÄ‰ª•ÂÆÉ‰∏çËÉΩÁªßÊâøË∂ÖÁ±ªÁöÑÂä®Áâ©„ÄÇËøôÂ∞±Á†¥Âùè‰∫ÜLiskovÊõø‰ª£ÂéüÂàô„ÄÇ

ÊÄªËÄåË®Ä‰πãÔºåÂ¶ÇÊûú‰Ω†ÂØπÁà∂Á±ªÂûãËØ¥ÁöÑÊòØÁúüÁöÑÔºåÈÇ£‰πàÂÆÉÂú®Êï¥‰∏™ÈìæÊù°‰∏≠ÈÉΩÂøÖÈ°ªÊòØÁúüÁöÑ„ÄÇ
Â¶ÇÊûú‰Ω†ËØ¥Áà∂Á±ªÂûãÂèØ‰ª•ÂÅöÊüê‰∫ãÔºåÈÇ£‰πàÊâÄÊúâÁöÑÂ≠êÁ±ªÂûã‰πüÈúÄË¶ÅËÉΩÂ§üÂÅöËøô‰ª∂‰∫ã„ÄÇ

'''
class Circle(object):
   __pi = 3.14

   def __init__(self, r):
       self.r = r

   @classmethod
   def pi(cls):
       return cls.__pi

   def area(self):
       """
ÂúÜÁöÑÈù¢ÁßØ
       """
       return self.r ** 2 * self.__pi

print(Circle.pi())  # Ê≤°ÊúâÂÆû‰æãÂåñ ËÉΩÁõ¥Êé•ËÆøÈóÆpi() ÊñπÊ≥ï
circle1 = Circle(2)
print(circle1.pi()) # ‰πüÂèØ‰ª•ÈÄöËøáÂÆû‰æãËÆøÈóÆpi()ÊñπÊ≥ï
print(circle1.area()) #12.56

# Êó†Ê≥ïÈÄöËøáÂÆû‰æãËÆøÈóÆ pi
# ‰∏ç‰ΩøÁî®classmethod
class Circle(object):
   __pi = 3.14

   def __init__(self, r):
       self.r = r

   #@classmethod
   #def pi(cls):
   #    return cls.__pi

   def area(self):
       """
ÂúÜÁöÑÈù¢ÁßØ
       """
       return self.r ** 2 * self.__pi

print(circle1.area()) # ÊàêÂäüËæìÂá∫ 12.56
#print(Circle.pi())  # Áõ¥Êé•ËÆøÈóÆpi()ÊñπÊ≥ï
circle1 = Circle(2)
#print(circle1.pi()) # ÈÄöËøáÂÆû‰æãËÆøÈóÆpi()ÊñπÊ≥ï


# CircleÁ±ª‰∏ãÁöÑpi()ÊñπÊ≥ïË¢´ @classmethod Ë£ÖÈ•∞ÂêéÔºå
# Êàë‰ª¨ËÉΩÈÄöËøáCircle.pi() Áõ¥Êé•ËøêË°åÊñπÊ≥ïÔºå‰∏çÁî®ÂÆû‰æãÂåñÁ±ª„ÄÇ
# Á§∫‰æãÔºöÈáçÊûÑÊûÑÈÄ†__init__() ÊñπÊ≥ïÂ∫îÁî®, Ê†ºÂºèÂåñÂàõÂª∫Êó∂Èó¥ÂÆû‰æã
import datetime
class Date(object):
   day = 0
   month = 0
   year = 0

   def __init__(self, year=0, month=0, day=0):
       self.day = day
       self.month = month
       self.year = year

   @classmethod
   def from_string(cls, date_as_string):
       year, month, day = date_as_string.split('-')
       date = cls(year, month, day)
       return date

d = datetime.date.today()
print(d)

d = "2022-4-21"
date1 = Date.from_string(d)  #  Áõ¥Êé•‰ΩøÁî®Âõ∫ÂÆöÊ†ºÂºèÁöÑÂ≠óÁ¨¶‰∏≤Â∞±ËÉΩÂàõÂª∫DateÁöÑÂÆû‰æã
print(date1.year, date1.month, date1.day)

#5
'''
A function can access a variable defined out of the function 
even if is not set as global.

Correct!üëç

This is true, as long as the function does not change the value 
of the variable. To do so, the variable has to be set as global 
with the global keyword. 
(geeksforgeeks.org/global-keyword-in-python)

ËøôÊòØÁúüÁöÑÔºåÂè™Ë¶ÅÂáΩÊï∞‰∏çÊîπÂèòÂèòÈáèÁöÑÂÄº„ÄÇ
Ë¶ÅÂÅöÂà∞Ëøô‰∏ÄÁÇπÔºåÂøÖÈ°ªÁî®globalÂÖ≥ÈîÆÂ≠óÂ∞ÜËØ•ÂèòÈáèËÆæÁΩÆ‰∏∫ÂÖ®Â±ÄÂèòÈáè„ÄÇ
(geekforgeeks.org/global-keyword in-python)
'''

#6 Which one of these modules doesn't have the ability to copy files?
'''
filecamp
shutil
subprocess
os

shutil , os and subprocess have functions allowing to copy files, 
in different ways. filecmp has another utility, it defines functions 
used to compare files and directories. 
(stackoverflow.com/questions/123198/how-do-i-copy-a-file-i...)
'''

#7 Which command starts the Django local development server?
'''
Wrong!üëé

manage.py runserver starts a Django development server on a local machine. 
Do not use this in production! (docs.djangoproject.com/fr/3.0/ref/django-admin)
'''

#8 The Python standard library supports more numerical types than NumPy.
'''
NumPy supports a much greater variety of numerical types than Python does. The NumPy data types are called dtypes. 
(tutorialspoint.com/numpy/numpy_data_types.htm)
'''

#9
'''
What is the output of the code snippet below?
a = 1
a -= 2 + 3
print(a)
'''

#10
'''
What is the output of the code snippet below?
print(list("hello"))

'''

'''
What is the type of the returned object in the code snippet below?
def foo(*args):
    return args


foo(1, 2, 3)

which?
dict
list
tuple
'''

#12
'''
What is the output of the code snippet below?
number = 28
for num in range(25, 30):
    if number > num:
        print(num)
    else:
        print(num)
        break
'''

'''
What it the output of the code snippet below?
print(float("56%"))

Correct!üëç

The float() option cannot cast a string containing the % character. 
(docs.python.org/3/library/functions.html#float)
'''

#13
'''
This question is sponsored by NordVPN.

What encryption technology does NordVPN use to secure its traffic?

Correct!üëç

NordVPN uses military-grade AES-256-GCM encryption to secure its traffic, using only the most secure protocols: OpenVPN (UDP and TCP), IKEv2/IPSec and NordLynx (based on WireGuard‚ìí).


Start navigating privately and securely today with NordVPN.
'''

#14
'''
Which one of those is not a Web Framework for Python?

Angular

web2py

TurboGears

Angular is a JavaScript Web Framework! 
(wiki.python.org/moin/WebFrameworks)
'''

'''
Which sentence is part of The Zen of Python?

Complex is better than simple.

Simple is better than complicated.

Simple is better than complex.

Complicated is better than simple.

Correct!üëç

In Python console, typing import this will display 
the Zen of Python poem: Beautiful is better than ugly. 
Explicit is better than implicit. Simple is better than complex. 
Complex is better than complicated. Flat is better than nested. 
Sparse is better than dense. Readability counts. 
Special cases aren't special enough to break the rules. 
Although practicality beats purity. Errors should never pass silently. 
Unless explicitly silenced. 
In the face of ambiguity, refuse the temptation to guess. 
There should be one-- and preferably only one --obvious way to do it. 
Although that way may not be obvious at first unless you're Dutch. 
Now is better than never. 
Although never is often better than *right* now. 
If the implementation is hard to explain, it's a bad idea. 
If the implementation is easy to explain, it may be a good idea. 
Namespaces are one honking great idea -- let's do more of those! 
(python.org/dev/peps/pep-0020)

'''

#16
'''
What it the output of the code snippet below?
print(float(""))

0.0

0

None

It will throw a ValueError error.
'''

#17
'''
What is the output of the code snippet below?
print(max(3, 0, 3.0, 0.3, 0))

3

3.0

0

0.0

0.3

Within the max() function, elements are separated by comas. Hence, the maximum elements are 3 and 3.0 . The max() function works in a way that an integer will be detected as max over a float with the same value. 
(thepythonguru.com/python-builtin-functions/max)
'''

#18
'''
In the Python world, what does ORM stand for?

Oklahoma Railway Museum

Optimal Resource Mapping

Optically Remote Module

Operational Risk Manager

Object Relational Mapper

In the Python world, an object-relational mapper (ORM) is a code library that automates the transfer of data stored in relational database tables into objects that are more commonly used in application code.
 (fullstackpython.com/object-relational-mappers-orms.html)
'''

#19
'''
CPython is:

interpreted.

compiled.

Both

CPython is both compiled and interpreted. When CPython is asked to run code, it first: compiles the code the bytecode (.pyc files). Bytecode is platform-independent. Then, CPython routes the bytecode to the Python Virtual Machine (PVM) for execution. The PVM is an interpreter, that can be seen as the runtime engine of Python. 
(https://stackoverflow.com/questions/6889747/is-python-interpreted-or-compiled-or-both)
'''

#19
'''
Is this code correct?
while true:
print("Hello, world!")

Yes

No

This code snippet is not correct. True represents the true value of the bool built-in type. It is always written with an uppercase T. 
(docs.python.org/3/library/constants.html)
'''

#21
'''
Which sentence is part of The Zen of Python?

Nested is better than flat.

Flat is better than nested
'''

#22
'''
What is the output of the code snippet below?
result = 0


def find_sum(num1, num2):
    if num1 != num2:
        result = num1+num2
    else:
        result = 2*(num1+num2)
        
        
find_sum(3, 4)
print(result)
find_sum(5, 5)
print(result)

In both calls of the find_sum() function, 
result is only modified within the scope of the function 
(it doesn't have the global keyword). 
Within the scope of the module, result still equals to 0. 
(w3schools.com/python/gloss_python_global_variables.asp)
'''

result = 0
def find_sum(num1, num2):
    if num1 != num2:
        result = num1 + num2
    else:
        result = 2 * (num1 + num2)

find_sum(3, 4)
print(result)
find_sum(5, 5)
print(result)

# return

result = 0
def find_sum(num1, num2):
    if num1 != num2:
        result = num1 + num2
        return result
    else:
        result = 2 * (num1 + num2)
        return result

find_sum(3, 4)
print(result)
find_sum(5, 5)
print(result)



#2 return

result = 0
def find_sum(num1, num2):
    if num1 != num2:
        result = num1 + num2
        #return result
    else:
        result = 2 * (num1 + num2)
    return result

print(find_sum(3, 4))
print(result)

print(find_sum(5, 5))
print(result)


#3 return

#result = 0
def find_sum(num1, num2):
    if num1 != num2:
        result = num1 + num2
        return result
    else:
        result = 2 * (num1 + num2)
        return result

find_sum(3, 4)
print(result)
find_sum(5, 5)
print(result)
