'''

众所周知, 名人、伟人都有不寻常的个人特性。如果你学代数，算一算他们的生日, 你就会发现，所有的名人和伟人的生日都具有如下的一个特点：
如：爱因斯坦的生日是：1879年3月14日，将年月日写在一起是 1879314。把这个数随意排列一下，可得到另一个数，比如： 4187139。
用大的数减去小的数得到一个差：4187139-1879314 = 2307825。将差的各个位数相加得到一个数，2+3+0+7+8+2+5 = 27，
再将这个数的位数相加，其和是9。即最后得到一个最大的一位数9。
按上述方法来计算数学家高斯的生日：高斯生于1867年11月7日，于是可得一个数 1867117， 重新排列后的数比如是1167781，
差数为 1867117-1167781 = 669336，算其位数和可得： 6+9+9+3+3+6 = 36，再算位数之和, 最后得 3+6 = 9。
同样,最后得到一个最大的一位数9。
所有的著名人物的生日都有这样的特点。这是成为著名人物的“必要条件”。
(C.C.Xi,2003.12.10 写于数学楼)
year = int(input("出生年份："))
month = int(input("出生月份："))
day = int(input("出生日期："))
'''

ymd = 19720903
import random
list1 = ["龙", "刘", "李", "周", "张"]
print(random.shuffle(list1))



'''
import calendar
cal = calendar.month(2019, 9)
print ("以下输出2016年1月份的日历:")
print (cal)

import time
#localtime = time.asctime( time.localtime(time.time()) )
localtime = time.perf_counter((time.time()))
print ("本地时间为 :", localtime)


import time
import calendar

    时间元组（年、月、日、时、分、秒、一周的第几日、一年的第几日、夏令时）
        一周的第几日: 0-6
        一年的第几日: 1-366
        夏令时: -1, 0, 1

python中时间日期格式化符号：
    ------------------------------------
    %y 两位数的年份表示（00-99）
    %Y 四位数的年份表示（000-9999）
    %m 月份（01-12）
    %d 月内中的一天（0-31）
    %H 24小时制小时数（0-23）
    %I 12小时制小时数（01-12）
    %M 分钟数（00=59）
    %S 秒（00-59）
    %a 本地简化星期名称
    %A 本地完整星期名称
    %b 本地简化的月份名称
    %B 本地完整的月份名称
    %c 本地相应的日期表示和时间表示
    %j 年内的一天（001-366）
    %p 本地A.M.或P.M.的等价符
    %U 一年中的星期数（00-53）星期天为星期的开始
    %w 星期（0-6），星期天为星期的开始
    %W 一年中的星期数（00-53）星期一为星期的开始
    %x 本地相应的日期表示
    %X 本地相应的时间表示
    %Z 当前时区的名称  # 乱码
    %% %号本身



# （1）当前时间戳
# 1538271871.226226
time.time()


# （2）时间戳 → 时间元组，默认为当前时间
# time.struct_time(tm_year=2018, tm_mon=9, tm_mday=3, tm_hour=9, tm_min=4, tm_sec=1, tm_wday=6, tm_yday=246, tm_isdst=0)
time.localtime()
time.localtime(1538271871.226226)


# （3）时间戳 → 可视化时间
# time.ctime(时间戳)，默认为当前时间
time.ctime(1538271871.226226)


# （4）时间元组 → 时间戳
# 1538271871
time.mktime((2018, 9, 30, 9, 44, 31, 6, 273, 0))


# （5）时间元组 → 可视化时间
# time.asctime(时间元组)，默认为当前时间
time.asctime()
time.asctime((2018, 9, 30, 9, 44, 31, 6, 273, 0))
time.asctime(time.localtime(1538271871.226226))


# （6）时间元组 → 可视化时间（定制）
# time.strftime(要转换成的格式，时间元组)
time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())


# （7）可视化时间（定制） → 时间元祖
# time.strptime(时间字符串，时间格式)
print(time.strptime('2018-9-30 11:32:23', '%Y-%m-%d %H:%M:%S'))


# （8）浮点数秒数，用于衡量不同程序的耗时，前后两次调用的时间差
#time.clock()
time.perf_counter
'''




